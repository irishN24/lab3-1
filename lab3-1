/*Реализовать сортировку массива методом прямая вставка
пустой массив
-40,17,57,25,-32,-10,83,87,-78,96,-66,-98,25
1,2,3,4,5,6,7,8
0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,1
1,0,0,0,1,0,0,0,0,1
*/
#include <stdio.h>

int main() {
    int numbers[] = {};
    int n = sizeof(numbers) / sizeof(numbers[0]);
    if (n != 0) {
        int tmp = 0, i, j;
        for (int i = 1; i < n; i++) {
            tmp = numbers[i];
            j = i - 1;

            while ((j >= 0) && (numbers[j] > tmp)) {
                numbers[j + 1] = numbers[j];
                j = j - 1;
            }
            numbers[j + 1] = tmp;
        }
        for (int i = 0; i < n; i++) {
            printf("%d, ", numbers[i]);
        }
    }
    else {
        printf("EMPTY ARRAY!\n");
    }
    return 0;
}
/*#include <stdio.h>

void insertionSortWithBarrier(int arr[], int n) {
    // Добавляем барьер в начало массива
    int temp[n + 1];
    temp[0] = -1; // Барьер
    for (int i = 0; i < n; i++) {
        temp[i + 1] = arr[i];
    }

    // Сортировка прямой вставкой с барьером
    for (int i = 2; i <= n; i++) {
        if (temp[i] < temp[i - 1]) {
            temp[0] = temp[i]; // Устанавливаем барьер
            int j = i - 1;
            while (temp[0] < temp[j]) {
                temp[j + 1] = temp[j];
                j--;
            }
            temp[j + 1] = temp[0];
        }
    }

    // Копируем отсортированный массив обратно в исходный массив
    for (int i = 0; i < n; i++) {
        arr[i] = temp[i + 1];
    }
}

int main() {
    int arr[] = {12, 11, 13, 5, 6};
    int n = sizeof(arr) / sizeof(arr[0]);

    insertionSortWithBarrier(arr, n);

    printf("Sorted array: \n");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    return 0;
}
*/
